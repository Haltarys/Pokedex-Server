# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Give the right permissions, otherwise ssh-add will refuse to add files.
  ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store.
  ##
  - chmod 400 "$SSH_PRIVATE_KEY"
  - eval $(ssh-agent -s)
  - ssh-add "$SSH_PRIVATE_KEY"

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Assuming you created the SSH_KNOWN_HOSTS file type CI/CD variable, uncomment the following two lines.
  ##
  - cp "$SSH_KNOWN_HOSTS" ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

stages: # List of stages for jobs, and their order of execution
  # - build
  # - test
  - deploy

# build-job: # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - yarn run build

# unit-test-job: # This job runs in the test stage.
#   stage: test # It only starts when the job in the build stage completes successfully.
#   script:
#     - yarn run test

# lint-test-job: # This job also runs in the test stage.
#   stage: test # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - yarn run lint

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  only:
    - main
  script:
    - echo "Deploying application..."
    - ssh $SSH_USER@$SSH_HOST "/app/deploy.sh"
    - echo "Application successfully deployed."
